# -*- coding: utf-8 -*-
"""pbakare_DIAML_Assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DFhsJYaxkF1PJC7gfjno-qPBojp2eMC4
"""

import pandas as peacepd
import matplotlib.pyplot as peaceplt
import seaborn as peacesns

pip install quandl

"""# **QUESTION 1**

Using the World Bank Indicators, download data for “GDP per capita (current US$)” and “Prevalence of underweight, weight for age (% of children under 5).” What kind of relationship do you expect? Make a scatter plot of malnutrition prevalence against GDP per capita (using all available years and countries). What kind of relationship do you see? Make a scatter plot for the geographical regions (six regions excluding North America and use a different color for each). Make a scatter plot for income levels (four income levels and use a different color for each). Carefully label all graphs and provide legends.

**Connecting the Dataset**
"""

df_GDP = peacepd.read_csv('/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_3401556.csv', skiprows=4)
df_weight = peacepd.read_csv('/API_SH.STA.MALN.ZS_DS2_en_csv_v2_3450829.csv', skiprows=4)

"""**Data Cleaning**"""

df_GDP.head()

df_weight.head()

#Melting of the Dataframes in preparation to merge the two dataframes.
df_GDP_melted = peacepd.melt(df_GDP, id_vars=['Country Name', 'Country Code'], var_name='Year', value_name='GDP per capita (Current US$)')

df_GDP_melted = df_GDP_melted[df_GDP_melted['Year'].str.isdigit()]

df_GDP_melted['Year'] = df_GDP_melted['Year'].astype(int)

df_weight_melted = peacepd.melt(df_weight, id_vars=['Country Name'], var_name='Year', value_name='Prevalence of underweight, weight for age (% of children under 5)')

df_weight_melted = df_weight_melted[df_weight_melted['Year'].str.isdigit()]

df_weight_melted['Year'] = df_weight_melted['Year'].astype(int)

merged_data = peacepd.merge(df_GDP_melted, df_weight_melted, on=['Country Name', 'Year'], how='inner')

merged_data.head()

merged_data.sample(10)

sum(merged_data['Prevalence of underweight, weight for age (% of children under 5)'].isna())

peaceplt.figure(figsize=(10, 6))
peacesns.heatmap(merged_data.isnull(), cmap='viridis', cbar=False)
peaceplt.title('NaN Values Heatmap')
peaceplt.show()

df_GDP_melted['GDP per capita (Current US$)'] = peacepd.to_numeric(df_GDP_melted['GDP per capita (Current US$)'], errors='coerce')

df_GDP_melted['GDP per capita (Current US$)'].head(20)

# Convert the 'GDP per capita (current US$)' column to string, if it's not already
df_GDP_melted['GDP per capita (Current US$)'] = df_GDP_melted['GDP per capita (Current US$)'].astype(str)

# Remove commas, dollar signs, and any extra spaces
df_GDP_melted['GDP per capita (Current US$)'] = df_GDP_melted['GDP per capita (Current US$)'].str.replace(',', '').str.replace('$', '').str.strip()

#Convert to numeric, coercing errors to NaN
df_GDP_melted['GDP per capita (Current US$)'] = peacepd.to_numeric(df_GDP_melted['GDP per capita (Current US$)'], errors='coerce')

# Verify the data type
print(df_GDP_melted['GDP per capita (Current US$)'].dtype)

# Check for null values
print(df_GDP_melted['GDP per capita (Current US$)'].isnull().sum())

# Inspect unique values
print(df_GDP_melted['GDP per capita (Current US$)'].unique()[:20])

"""**Exploratory Data Analysis**

**1a. Scatter Plot of Malnutrition Prevalence against GDP per capita (using all available years and countries)**
"""

peaceplt.figure(figsize=(10, 6))
peacesns.scatterplot(data=merged_data, x='GDP per capita (Current US$)', y='Prevalence of underweight, weight for age (% of children under 5)')
peaceplt.title('Scatter Plot of Malnutrition Prevalence against GDP per capita')
peaceplt.xlabel('GDP per capita (Current US$)')
peaceplt.ylabel('Prevalence of underweight, weight for age (% of children under 5)')
peaceplt.show()

"""**1b. Scatter Plot for the geographical regions (six regions excluding North America and use a different color for each)**"""

df_GDP_geo_regions = peacepd.read_csv('/Metadata_Country_API_NY.GDP.PCAP.CD_DS2_en_csv_v2_3401556.csv')
#df_weight_geo_regions = peacepd.read_csv('/content/Metadata_Country_API_SH.STA.MALN.ZS_DS2_en_csv_v2_3450829.csv')

df_GDP_geo_regions.head()

merged_data_with_metadata = peacepd.merge(merged_data, df_GDP_geo_regions, on='Country Code', how='inner')

merged_data_with_metadata.head()

merged_data_without_america = merged_data_with_metadata[merged_data_with_metadata['Region'] != 'North America']
peaceplt.figure(figsize=(10, 6))
peacesns.scatterplot(data=merged_data_without_america, x='GDP per capita (Current US$)', y='Prevalence of underweight, weight for age (% of children under 5)', hue=merged_data_without_america['Region'])
peaceplt.title('Scatter Plot for the geographical regions (six regions excluding North America)')
peaceplt.xlabel('GDP per capita (Current US$)')
peaceplt.ylabel('Prevalence of underweight, weight for age (% of children under 5)')
peaceplt.legend(title='Regions')
peaceplt.grid(True)
peaceplt.show()

"""**1c. Scatter Plot for Income levels (four income levels and use a different color for each)**"""

#merged_data_without_america = merged_data_with_metadata[merged_data_with_metadata['Region'] != 'North America']
peaceplt.figure(figsize=(10, 6))
peacesns.scatterplot(data=merged_data_with_metadata, x='GDP per capita (Current US$)', y='Prevalence of underweight, weight for age (% of children under 5)', hue='IncomeGroup')
peaceplt.title('Scatter Plot for Income Levels')
peaceplt.xlabel('GDP per capita (Current US$)')
peaceplt.ylabel('Prevalence of underweight, weight for age (% of children under 5)')
peaceplt.legend(title='Income Group')
peaceplt.grid(True)
peaceplt.show()

"""# **QUESTION 2**

Using Quandl, download data, synchronize the time stamps, and plot time series for the prices of Wheat, Crude Oil, and Gold in $ on the same graph. Indicate the maximum and minimum prices in all three time series using colored dots. Use a legend to explain each one.

**Import quandl and connect the datasets**
"""

#import quandl

#quandl.ApiConfig.api_key = '_FCGw8TMGgziMdsmV_gV'

#test_wheat_data = quandl.get("COM/PWHEAMT_USD")
#test_crude_oil_data = quandl.get("WGEC/WLD_CRUDE_WTI")
#test_gold_prices_data = quandl.get("BUNDESBANK/BBK01_WT5511")

#print(test_wheat_data.head())
#print("\n")
#print(test_crude_oil_data.head())
#print("\n")
#print(test_gold_prices_data.head())

#print(test_wheat_data.tail())
#print("\n")
#print(test_crude_oil_data.tail())
#print("\n")
#print(test_gold_prices_data.tail())

#wheat_data = quandl.get("COM/PWHEAMT_USD", start_date="1980-01-31", end_date="2016-04-18")
#crude_oil_data = quandl.get("WGEC/WLD_CRUDE_WTI", start_date="1980-01-31", end_date="2016-04-18")
#gold_prices_data = quandl.get("BUNDESBANK/BBK01_WT5511", start_date="1980-01-31", end_date="2016-04-18")

wheat_data = peacepd.read_csv('/wheat.csv')
wheat_data.head()

crude_oil_data = peacepd.read_csv('/crude-oil.csv')
crude_oil_data.head()

gold_prices_data = peacepd.read_csv('/gold.csv')
gold_prices_data.head()

wheat_data.rename(columns={'Value': 'Wheat'}, inplace=True)
crude_oil_data.rename(columns={'Value': 'Crude Oil'}, inplace=True)
gold_prices_data.rename(columns={'Value': 'Gold'}, inplace=True)

#wheat_oil_gold_data = wheat_data.merge(crude_oil_data, left_index=True, right_index=True).merge(gold_prices_data, left_index=True, right_index=True)
wheat_oil_gold_data = peacepd.merge(wheat_data, crude_oil_data, on='Date', how='inner').merge(gold_prices_data, on='Date', how='inner')

print(wheat_oil_gold_data.head())
print("\n")
print(wheat_oil_gold_data.tail())

wheat_oil_gold_data['Date'] = peacepd.to_datetime(wheat_oil_gold_data['Date'])

# Maximum points
max_wheat = wheat_oil_gold_data[wheat_oil_gold_data['Wheat'] == wheat_oil_gold_data['Wheat'].max()]
max_oil = wheat_oil_gold_data[wheat_oil_gold_data['Crude Oil'] == wheat_oil_gold_data['Crude Oil'].max()]
max_gold = wheat_oil_gold_data[wheat_oil_gold_data['Gold'] == wheat_oil_gold_data['Gold'].max()]

# Minimum points
min_wheat = wheat_oil_gold_data[wheat_oil_gold_data['Wheat'] == wheat_oil_gold_data['Wheat'].min()]
min_oil = wheat_oil_gold_data[wheat_oil_gold_data['Crude Oil'] == wheat_oil_gold_data['Crude Oil'].min()]
min_gold = wheat_oil_gold_data[wheat_oil_gold_data['Gold'] == wheat_oil_gold_data['Gold'].min()]

peaceplt.figure(figsize=(14, 8))
peaceplt.plot(wheat_oil_gold_data['Date'], wheat_oil_gold_data['Wheat'], label='Wheat', color='blue')
peaceplt.plot(wheat_oil_gold_data['Date'], wheat_oil_gold_data['Crude Oil'], label='Crude Oil', color='green')
peaceplt.plot(wheat_oil_gold_data['Date'], wheat_oil_gold_data['Gold'], label='Gold', color='orange')

peaceplt.scatter(max_wheat['Date'], max_wheat['Wheat'], color='blue', marker='o', label='Wheat Maximum Value')
peaceplt.scatter(min_wheat['Date'], min_wheat['Wheat'], color='blue', marker='x', label='Wheat Minimum Value')

peaceplt.scatter(max_oil['Date'], max_oil['Crude Oil'], color='green', marker='o', label='Crude Oil Maximum Value')
peaceplt.scatter(min_oil['Date'], min_oil['Crude Oil'], color='green', marker='x', label='Crude Oil Minimum Value')

peaceplt.scatter(max_gold['Date'], max_gold['Gold'], color='orange', marker='o', label='Gold Maximum Value')
peaceplt.scatter(min_gold['Date'], min_gold['Gold'], color='orange', marker='x', label='Gold Minimum Value')

peaceplt.xlabel('Date', fontsize=12)
peaceplt.ylabel('Price (in $)', fontsize=12)
peaceplt.title('Time Series of Wheat, Crude Oil, and Gold Prices (1980 - 2016)', fontsize=16)
peaceplt.legend()
peaceplt.grid(True)
peaceplt.show()

"""# **QUESTION 3**

Download “CO2 emissions (metric tons per capita)” data from the
World Bank Indicators. Select the emissions for all countries in 2010
and calculate summary statistics. Provide a table giving the mean,
median, standard deviation, 5, 25, 75, and 95 percentiles.
Repeat the same process for “School enrolment, primary (% net).”
"""

from IPython.display import display

co2_data = peacepd.read_csv('/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_3403796.csv', skiprows=4)
co2_data.head()

# To properly display the CO2 and school enrolment dataframe, melt the dataframe
co2_data_melted = co2_data.melt(id_vars=['Country Name', 'Country Code'], var_name='Year', value_name='CO2 Emissions (metric tons per capita)')

# To handle year filtering, convert the 'Year' column in the CO2 dataframe to numeric
co2_data_melted['Year'] = peacepd.to_numeric(co2_data_melted['Year'], errors='coerce')

co2_data_2010 = co2_data_melted[co2_data_melted['Year'] == 2010].dropna(subset=['CO2 Emissions (metric tons per capita)'])

co2_data_2010.head(20)

# Function to calculate Statistics Summary
def summary_statistics(df10, column):
  summary = {
      'Mean' : df10[column].mean(),
      'Median' : df10[column].median(),
      'Standard Deviation' : df10[column].std(),
      '5th Percentile' : df10[column].quantile(0.05),
      '25th Percentile' : df10[column].quantile(0.25),
      '75th Percentile' : df10[column].quantile(0.75),
      '95th Percentile' : df10[column].quantile(0.95)
  }
  return peacepd.DataFrame(summary, index=[0])

co2_summary = summary_statistics(co2_data_2010, 'CO2 Emissions (metric tons per capita)')
print("CO2 Emissions (metric tons per capita) Summary:")
display(co2_summary)

pip install tabulate

from tabulate import tabulate

print(tabulate(co2_summary, headers='keys', tablefmt='github'))



school_enrol_data = peacepd.read_csv('/API_SE.PRM.NENR_DS2_en_csv_v2_3409732.csv', skiprows=4)
school_enrol_data.head()

# To properly display the school enrolment dataframe, melt the dataframe
school_enrol_data_melted = school_enrol_data.melt(id_vars=['Country Name', 'Country Code'], var_name='Year', value_name='School Enrollment, Primary (% net)')

# To handle year filtering, convert the 'Year' column in the school enrolment dataframe to numeric
school_enrol_data_melted['Year'] = peacepd.to_numeric(school_enrol_data_melted['Year'], errors='coerce')

school_enrol_data_2010 = school_enrol_data_melted[school_enrol_data_melted['Year'] == 2010].dropna(subset=['School Enrollment, Primary (% net)'])

school_enrol_data_2010.head(20)

school_enrol_summary = summary_statistics(school_enrol_data_2010, 'School Enrollment, Primary (% net)')
print("\nSchool Enrolment, Primary (% net) Summary:")
display(school_enrol_summary)

"""# **QUESTION 4**

The World Bank Indicators provide variables called “Fertility rate,
total (births per woman)” and “GDP per capita (current US$)”.
Make a scatter plot of Fertility rate versus GDP per capita for all
countries in 2010. Produce cumulative distribution functions for the
fertility rate variable using data from 1990 and 2010 respectively.
Use vertical lines to indicate the mean and median. Use a legend to
explain which is the mean and which is the median. Have fertility
rates changed over this twenty-year period?
"""

fertility_data = peacepd.read_csv('/API_SP.DYN.TFRT.IN_DS2_EN_csv_v2_3404027.csv', skiprows=4)
fertility_data.head()

fertility_data_2010 = fertility_data[['Country Name', '1990', '2010']].rename(columns={'1990': '1990 Fertility Rate, Total (births per woman)', '2010': '2010 Fertility Rate, Total (births per woman)'})
fertility_data_2010.head()

gdp_data_2010 = df_GDP[['Country Name', '2010']].rename(columns={'2010': 'GDP per capita (current US$)'})
gdp_data_2010.head()

fertility_gdp_2010_merge = peacepd.merge(fertility_data_2010, gdp_data_2010, on='Country Name')
fertility_gdp_2010_merge_cleaned = fertility_gdp_2010_merge.dropna()
fertility_gdp_2010_merge_cleaned.head()

peaceplt.figure(figsize=(10, 6))
peacesns.scatterplot(data=fertility_gdp_2010_merge_cleaned, x='GDP per capita (current US$)', y='2010 Fertility Rate, Total (births per woman)')
peaceplt.title('Scatter Plot of Fertility Rate vs. GDP per Capita (2010)')
peaceplt.xlabel('GDP per capita (current US$)')
peaceplt.ylabel('2010 Fertility Rate')
peaceplt.grid(True)
peaceplt.show()

peacesns.ecdfplot(fertility_gdp_2010_merge_cleaned['1990 Fertility Rate, Total (births per woman)'], color='orange', label='Fertility Rate 1990')

peacesns.ecdfplot(fertility_gdp_2010_merge_cleaned['2010 Fertility Rate, Total (births per woman)'], color='green', label='Fertility Rate 2010')

# Calculate the mean and median for 1990
mean_1990 = fertility_gdp_2010_merge_cleaned['1990 Fertility Rate, Total (births per woman)'].mean()
median_1990 = fertility_gdp_2010_merge_cleaned['1990 Fertility Rate, Total (births per woman)'].median()

# Calculate the mean and median for 2010
mean_2010 = fertility_gdp_2010_merge_cleaned['2010 Fertility Rate, Total (births per woman)'].mean()
median_2010 = fertility_gdp_2010_merge_cleaned['2010 Fertility Rate, Total (births per woman)'].median()

# Add vertical lines for the mean and median for 1990
peaceplt.axvline(mean_1990, color='orange', linestyle='--', label=f'Mean 1990: {mean_1990:.2f}')
peaceplt.axvline(median_1990, color='orange', linestyle='-', label=f'Median 1990: {median_1990:.2f}')

# Add vertical lines for the mean and median for 2010
peaceplt.axvline(mean_2010, color='green', linestyle='--', label=f'Mean 2010: {mean_2010:.2f}')
peaceplt.axvline(median_2010, color='green', linestyle='-', label=f'Median 2010: {median_2010:.2f}')

# Plot the graph
peaceplt.title('ECDF Plot of Fertility Rate for 1990 and 2010')
peaceplt.xlabel('Fertility Rate, Total (births per woman)')
peaceplt.ylabel('Cumulative Probability')
peaceplt.legend(loc='lower right')
peaceplt.grid(True)
peaceplt.show()

# The Summary Statistics
summary_table = peacepd.DataFrame({
    'Statistic': ['Mean', 'Median'],
    'Fertility Rate 1990': [mean_1990, median_1990],
    'Fertility Rate 2010': [mean_2010, median_2010]
})

summary_table.set_index('Statistic', inplace=True)
print(summary_table)

"""# **QUESTION 5**

Download the data for the “Happy Planet Index” from hpi data and
“Corruption Perceptions Index” from
https://www.transparency.org/en/cpi/2016/index/nzl. Both datasets
are available as excel spread-sheets. Find matching countries for both
indices and make a carefully labelled scatter plot of HPI against CPI
to demonstrate the relationship using ranks in both cases. Are there
any countries that stand out as being unusual?
"""

hpi_data = peacepd.read_excel('/hpi-data-2016.xlsx', 'Complete HPI data', skiprows=5)
hpi_data.head()

hpi_data = hpi_data.iloc[:, 1: -1]
hpi_data.head()

corruption_data = peacepd.read_excel('/CPI2016_Results.xlsx', 'CPI2016_FINAL_16Jan')
corruption_data.head()

# Select needful columns from the dataframes
hpi_data_selected = hpi_data[['Country', 'HPI Rank']]
corruption_data_selected = corruption_data[['Country', 'WB Code', 'Rank']]

hpi_corruption_merged = peacepd.merge(hpi_data_selected, corruption_data_selected, on='Country', how='inner')

hpi_corruption_merged.head()

peaceplt.figure(figsize=(10, 6))
peacesns.scatterplot(data=hpi_corruption_merged, x='Rank', y='HPI Rank')
peaceplt.title('Fully annotated Scatter Plot showing relationship between Happy Index Rank and Corruption Rank (2016)')

for i, row in hpi_corruption_merged.iterrows():
  peaceplt.text(row['Rank'], row['HPI Rank'], row['WB Code'])

peaceplt.ylabel('HPI Rank (Happy Planet Index)')
peaceplt.xlabel('CPI 2016 Rank (Corruption Perception)')
peaceplt.grid(True)
peaceplt.show()

